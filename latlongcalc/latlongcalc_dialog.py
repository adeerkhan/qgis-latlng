# -*- coding: utf-8 -*-
"""
/***************************************************************************
 latlongcalcDialog
                                 A QGIS plugin
 Converts between Latitude and Longitude formats.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-08-29
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Arwic LLC
        email                : adeerkhan@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latlongcalc_dialog_base.ui'))


class latlongcalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(latlongcalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD)
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLatH.currentTextChanged.connect(self.latDMStoDD)

        self.spbLngD.valueChanged.connect(self.lngDMStoDD)
        self.spbLngM.valueChanged.connect(self.lngDMStoDD)
        self.spbLngS.valueChanged.connect(self.lngDMStoDD)
        self.cmbLngH.currentTextChanged.connect(self.lngDMStoDD)

        self.spbLatDD.editingFinished.connect(self.latDDtoDMS)
        self.spbLngDD.editingFinished.connect(self.lngDDtoDMS)

    def latDMStoDD(self):
        iDeg = self.spbLatD.value()
        iMin = self.spbLatM.value()
        dSec = self.spbLatS.value()
        sHem = self.cmbLatH.currentText()

        dDD = float(iDeg) + iMin/60 + dSec/3600
        if sHem == 'S':
            dDD = dDD * -1

        self.spbLatDD.setValue(dDD)

    def lngDMStoDD(self):
        iDeg = self.spbLngD.value()
        iMin = self.spbLngM.value()
        dSec = self.spbLngS.value()
        sHem = self.cmbLngH.currentText()

        dDD = float(iDeg) + iMin/60 + dSec/3600
        if sHem == 'W':
            dDD = dDD * -1

        self.spbLngDD.setValue(dDD)

    def latDDtoDMS(self):
        dDD = self.spbLatDD.value()

        iDeg = int(dDD)
        dMin = (dDD-iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin-iMin) * 60

        self.spbLatD.setValue(abs(iDeg))
        self.spbLatM.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSec))

        if dDD <0:
            self.cmbLatH.setCurrentText("S")
        else:
            self.cmbLatH.setCurrentText("N")

        self.repaint()

    def lngDDtoDMS(self):
        dDD = self.spbLngDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.spbLngD.setValue(abs(iDeg))
        self.spbLngM.setValue(abs(iMin))
        self.spbLngS.setValue(abs(dSec))

        if dDD < 0:
            self.cmbLngH.setCurrentText("W")
        else:
            self.cmbLngH.setCurrentText("E")

        self.repaint()